//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccesoDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBDistribuidosMensajeriaEntities : DbContext
    {
        public DBDistribuidosMensajeriaEntities()
            : base("name=DBDistribuidosMensajeriaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Contacto> Contacto { get; set; }
        public virtual DbSet<EstadoUsuario> EstadoUsuario { get; set; }
        public virtual DbSet<HistorialConversacion> HistorialConversacion { get; set; }
        public virtual DbSet<Mensaje> Mensaje { get; set; }
        public virtual DbSet<RecuperacionPassword> RecuperacionPassword { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TokenSesion> TokenSesion { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<UsuarioRol> UsuarioRol { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spActualizarMensaje(Nullable<int> idMensaje, string contenido, Nullable<bool> editado, Nullable<System.DateTime> fechaEnvio, string estado, Nullable<System.DateTime> fechaRegistro, Nullable<System.DateTime> fechaActualizacion)
        {
            var idMensajeParameter = idMensaje.HasValue ?
                new ObjectParameter("IdMensaje", idMensaje) :
                new ObjectParameter("IdMensaje", typeof(int));
    
            var contenidoParameter = contenido != null ?
                new ObjectParameter("Contenido", contenido) :
                new ObjectParameter("Contenido", typeof(string));
    
            var editadoParameter = editado.HasValue ?
                new ObjectParameter("Editado", editado) :
                new ObjectParameter("Editado", typeof(bool));
    
            var fechaEnvioParameter = fechaEnvio.HasValue ?
                new ObjectParameter("FechaEnvio", fechaEnvio) :
                new ObjectParameter("FechaEnvio", typeof(System.DateTime));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var fechaRegistroParameter = fechaRegistro.HasValue ?
                new ObjectParameter("FechaRegistro", fechaRegistro) :
                new ObjectParameter("FechaRegistro", typeof(System.DateTime));
    
            var fechaActualizacionParameter = fechaActualizacion.HasValue ?
                new ObjectParameter("FechaActualizacion", fechaActualizacion) :
                new ObjectParameter("FechaActualizacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizarMensaje", idMensajeParameter, contenidoParameter, editadoParameter, fechaEnvioParameter, estadoParameter, fechaRegistroParameter, fechaActualizacionParameter);
        }
    
        public virtual int spEliminarMensaje(Nullable<int> idMensaje)
        {
            var idMensajeParameter = idMensaje.HasValue ?
                new ObjectParameter("IdMensaje", idMensaje) :
                new ObjectParameter("IdMensaje", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarMensaje", idMensajeParameter);
        }
    
        public virtual int spInsertarMensaje(Nullable<int> idMensaje, Nullable<int> idRemitente, Nullable<int> idDestinatario, string contenido, Nullable<bool> editado, Nullable<System.DateTime> fechaEnvio, string estado, Nullable<System.DateTime> fechaRegistro, Nullable<System.DateTime> fechaActualizacion)
        {
            var idMensajeParameter = idMensaje.HasValue ?
                new ObjectParameter("IdMensaje", idMensaje) :
                new ObjectParameter("IdMensaje", typeof(int));
    
            var idRemitenteParameter = idRemitente.HasValue ?
                new ObjectParameter("IdRemitente", idRemitente) :
                new ObjectParameter("IdRemitente", typeof(int));
    
            var idDestinatarioParameter = idDestinatario.HasValue ?
                new ObjectParameter("IdDestinatario", idDestinatario) :
                new ObjectParameter("IdDestinatario", typeof(int));
    
            var contenidoParameter = contenido != null ?
                new ObjectParameter("Contenido", contenido) :
                new ObjectParameter("Contenido", typeof(string));
    
            var editadoParameter = editado.HasValue ?
                new ObjectParameter("Editado", editado) :
                new ObjectParameter("Editado", typeof(bool));
    
            var fechaEnvioParameter = fechaEnvio.HasValue ?
                new ObjectParameter("FechaEnvio", fechaEnvio) :
                new ObjectParameter("FechaEnvio", typeof(System.DateTime));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var fechaRegistroParameter = fechaRegistro.HasValue ?
                new ObjectParameter("FechaRegistro", fechaRegistro) :
                new ObjectParameter("FechaRegistro", typeof(System.DateTime));
    
            var fechaActualizacionParameter = fechaActualizacion.HasValue ?
                new ObjectParameter("FechaActualizacion", fechaActualizacion) :
                new ObjectParameter("FechaActualizacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarMensaje", idMensajeParameter, idRemitenteParameter, idDestinatarioParameter, contenidoParameter, editadoParameter, fechaEnvioParameter, estadoParameter, fechaRegistroParameter, fechaActualizacionParameter);
        }
    
        public virtual ObjectResult<spObtenerMensaje_Result> spObtenerMensaje(Nullable<int> idMensaje)
        {
            var idMensajeParameter = idMensaje.HasValue ?
                new ObjectParameter("IdMensaje", idMensaje) :
                new ObjectParameter("IdMensaje", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerMensaje_Result>("spObtenerMensaje", idMensajeParameter);
        }
    
        public virtual ObjectResult<spObtenerMensajesPorConversacion_Result> spObtenerMensajesPorConversacion(Nullable<int> idRemitente, Nullable<int> idDestinatario)
        {
            var idRemitenteParameter = idRemitente.HasValue ?
                new ObjectParameter("IdRemitente", idRemitente) :
                new ObjectParameter("IdRemitente", typeof(int));
    
            var idDestinatarioParameter = idDestinatario.HasValue ?
                new ObjectParameter("IdDestinatario", idDestinatario) :
                new ObjectParameter("IdDestinatario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerMensajesPorConversacion_Result>("spObtenerMensajesPorConversacion", idRemitenteParameter, idDestinatarioParameter);
        }
    
        public virtual ObjectResult<spObtenerMensajesPorEstado_Result> spObtenerMensajesPorEstado(string estado)
        {
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerMensajesPorEstado_Result>("spObtenerMensajesPorEstado", estadoParameter);
        }
    
        public virtual ObjectResult<spObtenerMensajesPorUsuario_Result> spObtenerMensajesPorUsuario(Nullable<int> idUsuario)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerMensajesPorUsuario_Result>("spObtenerMensajesPorUsuario", idUsuarioParameter);
        }
    
        public virtual ObjectResult<spObtenerTodosLosMensajes_Result> spObtenerTodosLosMensajes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerTodosLosMensajes_Result>("spObtenerTodosLosMensajes");
        }
    }
}
